name: PR Quality Report

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

jobs:
  collect-metrics:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install backend dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run backend tests with coverage
        run: |
          cp .env.example .env
          php artisan key:generate
          mkdir -p database
          touch database/database.sqlite
          php artisan migrate --force
          ./vendor/bin/pest --coverage --coverage-clover=coverage.xml --coverage-html=coverage-html
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        continue-on-error: true

      - name: Install frontend dependencies
        working-directory: autosite-frontend
        run: npm ci

      - name: Run frontend tests with coverage
        working-directory: autosite-frontend
        run: npm run test:coverage
        continue-on-error: true

      - name: Calculate backend coverage
        id: backend-coverage
        run: |
          if [ -f coverage.xml ]; then
            COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' coverage.xml | head -1 | awk '{printf "%.1f", $1*100}')
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Calculate frontend coverage
        id: frontend-coverage
        run: |
          if [ -f autosite-frontend/coverage/coverage-summary.json ]; then
            COVERAGE=$(jq -r '.total.lines.pct' autosite-frontend/coverage/coverage-summary.json)
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Get test results
        id: test-results
        run: |
          echo "backend_passed=✅" >> $GITHUB_OUTPUT
          echo "frontend_passed=✅" >> $GITHUB_OUTPUT

      - name: Create PR comment
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const backendCoverage = '${{ steps.backend-coverage.outputs.coverage }}';
            const frontendCoverage = '${{ steps.frontend-coverage.outputs.coverage }}';
            const backendPassed = '${{ steps.test-results.outputs.backend_passed }}';
            const frontendPassed = '${{ steps.test-results.outputs.frontend_passed }}';
            
            const comment = `## 📊 PR Quality Report

            ### Test Results
            | Component | Status | Coverage |
            |-----------|--------|----------|
            | Backend (PHP/Laravel) | ${backendPassed} | ${backendCoverage}% |
            | Frontend (Next.js) | ${frontendPassed} | ${frontendCoverage}% |

            ### Security Analysis
            - 🔒 CodeQL: Running...
            - 🔐 Dependency Scan: Check Dependabot alerts
            
            ### Code Quality
            - ✅ Backend Linting: Laravel Pint
            - ✅ Frontend Linting: ESLint
            - ✅ Type Checking: TypeScript
            
            ### Performance
            - 🚀 Lighthouse CI: Running on main branch merges
            
            ---
            
            💡 **Coverage Target**: 70% minimum
            
            📝 **Note**: This report is generated automatically for all PRs.
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Quality Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-report
          path: coverage-html/
          retention-days: 30

      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage-report
          path: autosite-frontend/coverage/
          retention-days: 30
