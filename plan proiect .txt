🚀 PROMPT FINAL — Refacere completă proiect AUTOSITE (Frontend + Integrare Backend)

Titlu: 🔧 Refacere completă AUTOSITE — implementare totală frontend & integrare backend până la lansare

Descriere:
Proiectul AUTOSITE a fost deteriorat în faza inițială („Current Phase: Phase 1 – Analysis & Design ✅”). În acest moment lipsesc componente funcționale majore, diferențierea clară între categorii de vehicule, testele și CI/CD‑ul. Acest task trebuie să reconstruiască complet proiectul frontend + backend integration, să îl ducă până la un MVP complet funcțional, fără întrerupere, până la finalizare.

Scop:
Reconstrucția completă a platformei AUTOSITE, tip marketplace auto multi‑categorie (gen mobile.de), cu un frontend profesional, scalabil și conectat complet la backend (Laravel API).

Probleme identificate:

Commit‑ul curent arată doar începutul fazei de analiză, fără implementare completă.

Lipsesc componente frontend funcționale (UI + logică).

Nu există diferențiere clară între categorii multiple de vehicule (mașini, moto, camioane, piese etc.).

Lipsesc integrări API reale.

Lipsesc teste unitare, e2e și CI/CD pipelines.

Claritatea funcțiilor este parțială, documentația trebuie actualizată.

Obiectiv general:
Reface complet frontend‑ul, conectează-l cu backend‑ul și finalizează implementarea tuturor funcțiilor planificate pentru un MVP complet, stabil și pregătit pentru producție.

🧱 Cerințe tehnice și funcționale

Frontend (Next.js + TypeScript):

Refactorizare totală structură.

Implementare Layout global (Header, Footer, Navbar).

Pagină principală (homepage) cu selectare categorie și căutare rapidă.

Categorii dinamice (mașini, motociclete, camioane, rulote, piese etc.) cu rute /vanzari/:categorie.

Listare anunțuri cu filtre dinamice (marcă, model, preț, an, km, locație etc.).

Pagină detaliu anunț cu galerie imagini, specificații, contact vânzător.

Pagini user: login/register/reset password, dashboard, favorite, mesaje, anunțuri proprii.

Formular adăugare anunț (dinamic pe categorie, validare + upload imagini/video).

Integrare completă cu backend API (Laravel): login/register, CRUD anunțuri, favorite, mesaje.

Pagini SEO: despre, termeni, confidențialitate, 404.

Dark mode + design responsiv complet.

Backend (Laravel):

Endpoint‑uri REST pentru toate funcțiile frontend‑ului.

Validări și autentificare JWT.

Management anunțuri, imagini, categorii, utilizatori.

API upload imagini (Cloudinary / local storage).

Filtrare avansată la nivel de query.

Funcționalități cheie:

Căutare globală și filtrare avansată.

Autentificare și dashboard utilizator.

Favorite și mesagerie între utilizatori.

Upload media (imagini + video).

Internaționalizare (RO/EN/DE) + multi‑monedă (RON/EUR/USD).

SEO + performanță (Lazy load, optimizare imagini, meta dinamic).

Teste unitare + e2e.

CI/CD pipelines automate (GitHub Actions).

⚙️ Stack Tehnologic Recomandat

Frontend:

Next.js 15+ (App Router, TypeScript)

TailwindCSS

Zustand sau Redux Toolkit

React Hook Form + Yup

Axios

React Query (TanStack)

next‑intl (traducei)

Backend:

Laravel 11

Sanctum / Passport pentru autentificare

MySQL / PostgreSQL

Cloudinary SDK pentru upload media

Testare:

Jest + React Testing Library (frontend)

PHPUnit (backend)

Cypress (end‑to‑end)

CI/CD:

GitHub Actions: lint + test + build + deploy

📁 Structură de fișiere sugerată (Frontend)
frontend/
├── app/                   # Next.js App Router
│   ├── (public-pages)/    # Homepage, 404, despre, etc.
│   ├── (auth)/            # login, register
│   ├── (user)/            # dashboard, favorite, mesaje
│   ├── (listings)/        # categorii + listare + detaliu
│   └── layout.tsx
├── components/
├── features/
│   ├── auth/
│   ├── listings/
│   ├── filters/
│   ├── user/
│   └── categories/
├── services/              # API
├── store/                 # Zustand/Redux
├── utils/
├── types/
└── i18n/

🧩 Etape de lucru (automatizate)

🧱 Refactorizare structură frontend complet.

🎨 Implementare layout, navigație, homepage.

🧭 Adăugare categorii multiple și rutare dinamică.

🔍 Implementare filtrare și listare anunțuri.

📄 Pagina detaliu anunț.

👤 Autentificare și dashboard utilizator.

✍️ Formular adăugare/editare anunț.

💬 Mesagerie și favorite.

🌍 Internaționalizare + multi‑monedă.

🧪 Testare (unit + e2e).

🚀 CI/CD + deploy automat.

🕒 Deadline și execuție automată

Începe execuția imediat după aprobarea issue‑ului.

Rulează procesele secvențial (fără pauză) până la finalizare.

Verifică și validează fiecare etapă automat (test pipeline).

Termen limită: mâine la ora 23:59 (finalizare completă, build funcțional, fără erori).

Rezultat așteptat:
✅ Site complet funcțional, 100% responsive, cu toate funcțiile active, conectat la backend și pregătit de lansare (demo build + deploy).

Criterii de succes:

Fără erori în console și build.

Toate paginile funcționale.

API‑urile funcționează integral.

CI/CD rulează automat.

Lighthouse ≥ 90.

🔧 Notă finală:
Acest task trebuie rulat automat până la final, fără oprire, utilizând GitHub Actions sau un agent CI configurat.
După terminare, va fi generat build‑ul final și un raport cu stadiul tuturor funcțiilor.