EÈ™ti un senior full-stack developer. CreeazÄƒ frontend-ul complet pentru proiectul **AUTOSITE**, folosind ca bazÄƒ template-ul `Blazity/next-enterprise`.

ðŸ“¦ Stack tehnic:
- Next.js 16 (App Router, Turbopack activ)
- TypeScript strict
- Tailwind CSS + Radix UI + class-variance-authority
- React Query pentru apeluri API
- ESLint + Prettier + Vitest + Playwright (din template)
- i18n pentru EN / RO / DE
- Axios pentru comunicarea cu backend-ul Laravel
- Deployment: Vercel ready

ðŸ”— Backend API:
Laravel 11 + Filament v4 (ruleazÄƒ pe http://localhost:8000/api)
Endpoints disponibile:
- GET /vehicles
- GET /vehicles/{id}
- GET /dealers
- POST /messages
- GET /settings
- GET /brands
Autentificare prin Sanctum / JWT (Bearer token)

ðŸŽ¨ Design & UX:
- Inspirat de mobile.de È™i autoscout24.de
- Homepage cu filtre (brand, preÈ›, categorie, transmisie, combustibil, an, km)
- Listare vehicule Ã®n grid responsive (CarCard component)
- Pagina /vehicles/[id] cu imagini mari, detalii complete È™i buton "Contact dealer"
- Pagina /compare pentru compararea a 2â€“3 vehicule
- Pagina /dealers pentru listarea dealerilor (cu logo, locaÈ›ie, numÄƒr de anunÈ›uri)
- Layout global cu navbar sticky, footer, dark/light mode
- PaginÄƒ /auth pentru login/register
- Sistem multi-limbÄƒ (EN/RO/DE) cu i18n middleware
- PaginÄƒ /contact cu trimitere mesaj API POST /messages

ðŸ§  Extra:
- Fallback UI È™i error boundaries
- SEO metadata (title, description, canonical)
- Global loading spinner È™i skeletons pentru pagini lente
- Integrare cu OpenAI API (cÄƒutare inteligentÄƒ â€“ doar endpoint placeholder)
- Config `env.mjs` cu variabile (NEXT_PUBLIC_API_URL, STRIPE_KEY, OPENAI_KEY)

ðŸ“‚ Structura doritÄƒ:
src/
 â”œâ”€â”€ app/
 â”‚   â”œâ”€â”€ (public)/
 â”‚   â”‚   â”œâ”€â”€ page.tsx            â†’ homepage
 â”‚   â”‚   â”œâ”€â”€ vehicles/
 â”‚   â”‚   â”‚   â”œâ”€â”€ page.tsx        â†’ listare vehicule
 â”‚   â”‚   â”‚   â””â”€â”€ [id]/page.tsx   â†’ detalii vehicul
 â”‚   â”‚   â”œâ”€â”€ dealers/
 â”‚   â”‚   â”‚   â””â”€â”€ page.tsx
 â”‚   â”‚   â”œâ”€â”€ compare/
 â”‚   â”‚   â”‚   â””â”€â”€ page.tsx
 â”‚   â”‚   â”œâ”€â”€ contact/page.tsx
 â”‚   â”‚   â””â”€â”€ auth/
 â”‚   â”‚       â”œâ”€â”€ login/page.tsx
 â”‚   â”‚       â””â”€â”€ register/page.tsx
 â”‚   â”œâ”€â”€ layout.tsx
 â”‚   â””â”€â”€ globals.css
 â”œâ”€â”€ components/
 â”‚   â”œâ”€â”€ ui/
 â”‚   â”œâ”€â”€ CarCard.tsx
 â”‚   â”œâ”€â”€ FiltersPanel.tsx
 â”‚   â”œâ”€â”€ Navbar.tsx
 â”‚   â”œâ”€â”€ Footer.tsx
 â”‚   â”œâ”€â”€ CompareTable.tsx
 â”‚   â””â”€â”€ DealerCard.tsx
 â”œâ”€â”€ lib/
 â”‚   â”œâ”€â”€ api.ts
 â”‚   â”œâ”€â”€ axiosClient.ts
 â”‚   â”œâ”€â”€ hooks/
 â”‚   â””â”€â”€ utils/
 â””â”€â”€ locales/
     â”œâ”€â”€ en.json
     â”œâ”€â”€ ro.json
     â””â”€â”€ de.json

ðŸŽ¯ Obiectiv final:
1. PorneÈ™te de la codul din `Blazity/next-enterprise`
2. AdaugÄƒ toate rutele È™i componentele de mai sus
3. ConecteazÄƒ API-ul Laravel via Axios + React Query
4. ActiveazÄƒ i18n (EN/RO/DE)
5. IntegreazÄƒ dark/light mode
6. OptimizeazÄƒ Lighthouse 100/100
7. ConfigureazÄƒ build Vercel

ðŸ§© Output aÈ™teptat:
- Structura completÄƒ a proiectului Next.js (toate fiÈ™ierele È™i folderele)
- Cod TypeScript curat È™i comentat
- ExplicaÈ›ii scurte pentru setup & rulare local (`pnpm dev` etc.)
